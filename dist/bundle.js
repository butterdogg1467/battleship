/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("let {\n  middleCords\n} = __webpack_require__(/*! ./visualgamescript.js */ \"./visualgamescript.js\");\nclass Ship {\n  constructor([x, y], [x2, y2], type) {\n    this.length = Math.max(Math.abs(x2 - x), Math.abs(y2 - y)) + 1;\n    this.hits = 0;\n    this.sunk = false;\n    this.start = [x, y];\n    this.end = [x2, y2];\n    this.type = type;\n  }\n  hit() {\n    this.hits++;\n    this.isSunk();\n    return this.hits;\n  }\n  isSunk() {\n    if (this.hits >= this.length) {\n      this.sunk = true;\n      return true;\n    } else {\n      this.sunk = false;\n      return false;\n    }\n  }\n}\nclass Gameboard {\n  ships = [];\n  missed = [];\n  shipsSunk = false;\n  placeShip([x, y], [x2, y2], type) {\n    this.ship = new Ship([x, y], [x2, y2], type);\n    this.ships.push(this.ship);\n  }\n  receiveAttack([x, y]) {\n    for (let i = 0; i < this.ships.length; i++) {\n      if (x === this.ships[i].start[0] && y === this.ships[i].start[1] || x === this.ships[i].end[0] && y === this.ships[i].end[1] || x >= this.ships[i].start[0] && y >= this.ships[i].start[1] && x <= this.ships[i].end[0] && y <= this.ships[i].end[1]) {\n        this.ships[i].hit();\n        if (this.ships[i].isSunk()) {\n          this.ships.splice(i, 1);\n          if (this.ships.length <= 0) {\n            this.shipsSunk = true;\n            console.log('sunk');\n            return true;\n          }\n        }\n        return true;\n      } else {\n        this.missed.push([x, y]);\n      }\n    }\n    return false;\n  }\n}\nclass Players {\n  constructor(isComputer = false) {\n    this.board = new Gameboard();\n    this.wins = 0;\n    this.losses = 0;\n    this.isComputer = isComputer;\n  }\n}\nmodule.exports = {\n  Ship,\n  Gameboard,\n  Players\n};\n\n//# sourceURL=webpack://battleship/./index.js?");

/***/ }),

/***/ "./visualgamescript.js":
/*!*****************************!*\
  !*** ./visualgamescript.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("document.addEventListener('DOMContentLoaded', () => {\n  let {\n    Ship,\n    Gameboard,\n    Players\n  } = __webpack_require__(/*! ./index.js */ \"./index.js\");\n  let player = new Players();\n  let computer = new Players(true);\n  let cordsdisplay = document.querySelector('.cordsdisplay');\n  let startCordsBox = document.querySelector('#startcords');\n  let endCordsBox = document.querySelector('#endcords');\n  let cordsSubmit = document.querySelector('.submitcords');\n  let startButton = document.querySelector('.startgame');\n  let randomPlaceButton = document.querySelector('.randomplacebutton');\n  let isStarted = false;\n  let shipTypesButtons = document.querySelector('.shiptypes');\n  let dragDropToggle = document.querySelector('.dragdroptoggle');\n  let cordInputs = document.querySelector('.cordinputs');\n  let errors = document.querySelector('.errors');\n  let errorDisplay = document.querySelector('.errordisplay');\n  let errorOne = document.querySelector('.errorone');\n  let carrierButton = document.querySelector('#carrier');\n  let battleshipButton = document.querySelector('#battleship');\n  let cruiserButton = document.querySelector('#cruiser');\n  let submarineButton = document.querySelector('#submarine');\n  let destroyerButton = document.querySelector('#destroyer');\n  let carrier = false;\n  let battleship = false;\n  let cruiser = false;\n  let submarine = false;\n  let destroyer = false;\n  const carrierTitle = document.querySelector('.carrierlisttitle');\n  const battleshipTitle = document.querySelector('.battleshiplisttitle');\n  const cruiserTitle = document.querySelector('.cruiserlisttitle');\n  const submarineTitle = document.querySelector('.submarinelisttitle');\n  const destroyerTitle = document.querySelector('.destroyerlisttitle');\n  let carrierHits = document.querySelector('#carrierlisthits');\n  let battleshipHits = document.querySelector('#battleshiplisthits');\n  let cruiserHits = document.querySelector('#cruiserlisthits');\n  let submarineHits = document.querySelector('#submarinelisthits');\n  let destroyerHits = document.querySelector('#destroyerlisthits');\n  const carrierSunk = document.querySelector('#carrierlistsunk');\n  const battleshipSunk = document.querySelector('#battleshiplistsunk');\n  const cruiserSunk = document.querySelector('#cruiserlistsunk');\n  const submarineSunk = document.querySelector('#submarinelistsunk');\n  const destroyerSunk = document.querySelector('#destroyerlistsunk');\n  const computerCarrierTitle = document.querySelector('.computercarrierlisttitle');\n  const computerBattleshipTitle = document.querySelector('.computerbattleshiplisttitle');\n  const computerCruiserTitle = document.querySelector('.computercruiserlisttitle');\n  const computerSubmarineTitle = document.querySelector('.computersubmarinelisttitle');\n  const computerDestroyerTitle = document.querySelector('.computerdestroyerlisttitle');\n  const computerCarrierHits = document.querySelector('#computercarrierlisthits');\n  const computerBattleshipHits = document.querySelector('#computerbattleshiplisthits');\n  const computerCruiserHits = document.querySelector('#computercruiserlisthits');\n  const computerSubmarineHits = document.querySelector('#computersubmarinelisthits');\n  const computerDestroyerHits = document.querySelector('#computerdestroyerlisthits');\n  const computerCarrierSunk = document.querySelector('#computercarrierlistsunk');\n  const computerBattleshipSunk = document.querySelector('#computerbattleshiplistsunk');\n  const computerCruiserSunk = document.querySelector('#computercruiserlistsunk');\n  const computerSubmarineSunk = document.querySelector('#computersubmarinelistsunk');\n  const computerDestroyerSunk = document.querySelector('#computerdestroyerlistsunk');\n  let cellsStruck = [];\n  let dragDropOn = false;\n  let dragDropShipContainer = document.createElement('div');\n  cordsdisplay.textContent = '(' + 0 + ', ' + 0 + ')';\n  function toggleDragDrop() {\n    if (dragDropOn === true) {\n      cordInputs.removeChild(dragDropShipContainer);\n      cordInputs.appendChild(shipTypesButtons);\n      dragDropOn = false;\n    } else {\n      dragDropOn = true;\n      cordInputs.removeChild(shipTypesButtons);\n      dragDropShipContainer.classList.add('dragdropshipcontainer');\n      cordInputs.appendChild(dragDropShipContainer);\n    }\n  }\n  dragDropToggle.addEventListener('click', () => {\n    toggleDragDrop();\n  });\n  function createBoard(boardID) {\n    let board = document.getElementById(boardID);\n    for (let i = 9; i >= 0; i--) {\n      for (let j = 0; j < 10; j++) {\n        let cell = document.createElement('div');\n        cell.dataset.x = j;\n        cell.dataset.y = i;\n        cell.classList.add('cell');\n        board.appendChild(cell);\n        cell.addEventListener('mouseover', () => {\n          cordsdisplay.textContent = '(' + cell.dataset.x + ', ' + cell.dataset.y + ')';\n        });\n        cell.addEventListener('mouseleave', () => {\n          cordsdisplay.textContent = '(' + 0 + ', ' + 0 + ')';\n        });\n        if (boardID === 'computerboard') {\n          cell.addEventListener('click', () => {\n            if (isStarted === true) {\n              detectHit(cell);\n            }\n          });\n        }\n      }\n    }\n  }\n  function gameEnd(boardID) {\n    let winStatus = document.createElement('div');\n    let winStatush1 = document.createElement('h1');\n    let boardCover = document.createElement('div');\n    let playAgainButton = document.createElement('button');\n    boardCover.classList.add('boardcover');\n    playAgainButton.classList.add('playagainbutton');\n    playAgainButton.textContent = \"Play Again\";\n    winStatus.classList.add('winstatus');\n    winStatus.appendChild(winStatush1);\n    boardCover.appendChild(playAgainButton);\n    let playerBoard = document.getElementById('playerboard');\n    let computerBoard = document.getElementById('computerboard');\n    playAgainButton.addEventListener('click', () => {\n      location.reload();\n    });\n    if (boardID === 'playerboard') {\n      playerBoard.appendChild(winStatus);\n      computerBoard.appendChild(boardCover);\n      winStatush1.textContent = \"Player Wins!\";\n    } else if (boardID === 'computerboard') {\n      computerBoard.appendChild(winStatus);\n      playerBoard.appendChild(boardCover);\n      winStatush1.textContent = \"Computer Wins!\";\n    }\n  }\n  function middleCords(start, end) {\n    let yCords = [];\n    let xCords = [];\n    if (start[0] === end[0]) {\n      yCords.push(start);\n      const constantX = start[0];\n      for (let i = Math.min(start[1], end[1]) + 1; i < Math.max(start[1], end[1]); i++) {\n        yCords.push([constantX, i]);\n      }\n      yCords.push(end);\n      return yCords;\n    } else if (start[1] === end[1]) {\n      xCords.push(start);\n      const constantY = start[1];\n      for (let i = Math.min(start[0], end[0]) + 1; i < Math.max(start[0], end[0]); i++) {\n        xCords.push([i, constantY]);\n      }\n      xCords.push(end);\n      return xCords;\n    }\n  }\n  function removeErorrClass() {\n    errorDisplay.classList.remove('errorpresent');\n    errorOne.textContent = '';\n  }\n  function checkPlacement(start, end, boardID) {\n    let range = middleCords(start, end);\n    let bufferCords = getBufferZone(range);\n    let allCords = [...range, ...bufferCords];\n    let hasShipFound = false;\n    for (let i = 0; i < allCords.length; i++) {\n      let x = allCords[i][0];\n      let y = allCords[i][1];\n      let cell = document.querySelector(`#${boardID} [data-x=\"${x}\"][data-y=\"${y}\"]`);\n      if (cell && cell.hasShip) {\n        hasShipFound = true;\n      }\n    }\n    if (hasShipFound === true) {\n      if (boardID === 'playerboard') {\n        errorDisplay.classList.add('errorpresent');\n        errorOne.textContent = \"ERROR: There is already a ship here!\";\n        setTimeout(removeErorrClass, 5000);\n      }\n      return true;\n    } else if (hasShipFound === false) {\n      return false;\n    }\n  }\n  function shipVisual(cords, boardID) {\n    let start = cords[0];\n    let end = cords[cords.length - 1];\n    if (checkPlacement(start, end, boardID) === true) {\n      return;\n    } else {\n      cords.forEach(cord => {\n        let x = cord[0];\n        let y = cord[1];\n        let cell = document.querySelector(`#${boardID} [data-x=\"${x}\"][data-y=\"${y}\"]`);\n        cell.hasShip = true;\n        if (boardID === 'playerboard') {\n          cell.classList.add('ship');\n        }\n      });\n    }\n  }\n  function computerHit(boardID) {\n    let hits = [];\n    let x = Math.floor(Math.random() * (9 - 0) + 0);\n    let y = Math.floor(Math.random() * (9 - 0) + 0);\n    while (cellsStruck.some(cord => cord[0] === x && cord[1] === y)) {\n      x = Math.floor(Math.random() * (9 - 0) + 0);\n      y = Math.floor(Math.random() * (9 - 0) + 0);\n    }\n    let cell = document.querySelector(`#${boardID} [data-x=\"${x}\"][data-y=\"${y}\"]`);\n    let hitShip = player.board.ships.find(ship => {\n      let shipCords = middleCords(ship.start, ship.end);\n      return shipCords.some(cord => cord[0] === x && cord[1] === y);\n    });\n    if (player.board.receiveAttack([x, y])) {\n      hits.push(cell);\n      cellsStruck.push([x, y]);\n      cell.classList.add('hit');\n      cell.isHit = true;\n      updatePlayerList(hitShip);\n      if (player.board.ships.length === 0) {\n        gameEnd('computerboard');\n      }\n    } else {\n      cell.classList.add('missed');\n      cellsStruck.push([x, y]);\n      console.log([x, y]);\n      cell.isHit = true;\n    }\n  }\n  function detectHit(cell) {\n    if (cell.isHit === true) {\n      return;\n    }\n    let hits = [];\n    let x = parseInt(cell.dataset.x);\n    let y = parseInt(cell.dataset.y);\n    let coords = [x, y];\n    let hitShip = computer.board.ships.find(ship => {\n      let shipCords = middleCords(ship.start, ship.end);\n      return shipCords.some(cord => cord[0] === x && cord[1] === y);\n    });\n    if (computer.board.receiveAttack([x, y])) {\n      hits.push(cell);\n      cell.classList.add('hit');\n      cell.isHit = true;\n      updateComputerList(hitShip);\n      console.log(computer.board.ships.length);\n      if (computer.board.ships.length === 0) {\n        gameEnd('playerboard');\n      }\n    } else {\n      cell.classList.add('missed');\n      cell.isHit = true;\n    }\n    computerHit('playerboard');\n  }\n  function resetShipButtonColors() {\n    carrierButton.style.backgroundColor = 'white';\n    battleshipButton.style.backgroundColor = 'white';\n    cruiserButton.style.backgroundColor = 'white';\n    submarineButton.style.backgroundColor = 'white';\n    destroyerButton.style.backgroundColor = 'white';\n  }\n  createBoard('playerboard');\n  createBoard('computerboard');\n  carrierButton.addEventListener('click', () => {\n    resetShipButtonColors();\n    carrier = true;\n    battleship = false;\n    cruiser = false;\n    submarine = false;\n    destroyer = false;\n    carrierButton.style.backgroundColor = 'orange';\n  });\n  battleshipButton.addEventListener('click', () => {\n    resetShipButtonColors();\n    carrier = false;\n    battleship = true;\n    cruiser = false;\n    submarine = false;\n    destroyer = false;\n    battleshipButton.style.backgroundColor = 'orange';\n  });\n  cruiserButton.addEventListener('click', () => {\n    resetShipButtonColors();\n    carrier = false;\n    battleship = false;\n    cruiser = true;\n    submarine = false;\n    destroyer = false;\n    cruiserButton.style.backgroundColor = 'orange';\n  });\n  submarineButton.addEventListener('click', () => {\n    resetShipButtonColors();\n    carrier = false;\n    battleship = false;\n    cruiser = false;\n    submarine = true;\n    destroyer = false;\n    submarineButton.style.backgroundColor = 'orange';\n  });\n  destroyerButton.addEventListener('click', () => {\n    resetShipButtonColors();\n    carrier = false;\n    battleship = false;\n    cruiser = false;\n    submarine = false;\n    destroyer = true;\n    destroyerButton.style.backgroundColor = 'orange';\n  });\n  function getShipLength(start, end) {\n    let xLength = Math.abs(end[0] - start[0]);\n    let yLength = Math.abs(end[1] - start[1]);\n    if (xLength === 0) {\n      return yLength + 1;\n    } else if (yLength === 0) {\n      return xLength + 1;\n    } else {\n      return false;\n    }\n  }\n  cordsSubmit.addEventListener('click', () => {\n    if (carrier === false && battleship === false && cruiser === false && submarine === false && destroyer === false) {\n      errorDisplay.classList.add('errorpresent');\n      errorOne.textContent = \"You must select a ship type!\";\n      setTimeout(removeErorrClass, 5000);\n      return;\n    }\n    let shipCordsStart = startCordsBox.value;\n    let shipCordsEnd = endCordsBox.value;\n    let shipCordsStartArr = JSON.parse(\"[\" + shipCordsStart + \"]\");\n    let shipCordsEndArr = JSON.parse(\"[\" + shipCordsEnd + \"]\");\n    if (carrier === true) {\n      if (getShipLength(shipCordsStartArr, shipCordsEndArr) !== 5) {\n        errorDisplay.classList.add('errorpresent');\n        errorOne.textContent = \"A carrier ship must be 5 cells long!\";\n        setTimeout(removeErorrClass, 5000);\n        return;\n      }\n      if (checkPlacement(shipCordsStartArr, shipCordsEndArr, \"playerboard\") === true) {\n        return;\n      }\n      player.board.placeShip(shipCordsStartArr, shipCordsEndArr);\n      checkPlacement(shipCordsStartArr, shipCordsEndArr);\n      shipVisual(middleCords(shipCordsStartArr, shipCordsEndArr), 'playerboard');\n      carrier = false;\n      carrierButton.disabled = true;\n      shipCordsStart = '';\n      shipCordsEnd = '';\n      shipCordsStartArr = [];\n      shipCordsEndArr = [];\n      startCordsBox.value = '';\n      endCordsBox.value = '';\n      return;\n    } else if (battleship === true) {\n      if (getShipLength(shipCordsStartArr, shipCordsEndArr) !== 4) {\n        errorDisplay.classList.add('errorpresent');\n        errorOne.textContent = \"A battleship ship must be 4 cells long!\";\n        setTimeout(removeErorrClass, 5000);\n        return;\n      }\n      if (checkPlacement(shipCordsStartArr, shipCordsEndArr, \"playerboard\") === true) {\n        return;\n      }\n      player.board.placeShip(shipCordsStartArr, shipCordsEndArr);\n      checkPlacement(shipCordsStartArr, shipCordsEndArr);\n      shipVisual(middleCords(shipCordsStartArr, shipCordsEndArr), 'playerboard');\n      battleship = false;\n      battleshipButton.disabled = true;\n      shipCordsStart = '';\n      shipCordsEnd = '';\n      shipCordsStartArr = [];\n      shipCordsEndArr = [];\n      startCordsBox.value = '';\n      endCordsBox.value = '';\n      return;\n    } else if (cruiser === true) {\n      if (getShipLength(shipCordsStartArr, shipCordsEndArr) !== 3) {\n        errorDisplay.classList.add('errorpresent');\n        errorOne.textContent = \"A cruiser ship must be 3 cells long!\";\n        setTimeout(removeErorrClass, 5000);\n        return;\n      }\n      if (checkPlacement(shipCordsStartArr, shipCordsEndArr, \"playerboard\") === true) {\n        return;\n      }\n      player.board.placeShip(shipCordsStartArr, shipCordsEndArr);\n      checkPlacement(shipCordsStartArr, shipCordsEndArr);\n      shipVisual(middleCords(shipCordsStartArr, shipCordsEndArr), 'playerboard');\n      cruiser = false;\n      cruiserButton.disabled = true;\n      shipCordsStart = '';\n      shipCordsEnd = '';\n      shipCordsStartArr = [];\n      shipCordsEndArr = [];\n      startCordsBox.value = '';\n      endCordsBox.value = '';\n      return;\n    } else if (submarine === true) {\n      if (getShipLength(shipCordsStartArr, shipCordsEndArr) !== 3) {\n        errorDisplay.classList.add('errorpresent');\n        errorOne.textContent = \"A submarine must be 3 cells long!\";\n        setTimeout(removeErorrClass, 5000);\n        return;\n      }\n      if (checkPlacement(shipCordsStartArr, shipCordsEndArr, \"playerboard\") === true) {\n        return;\n      }\n      player.board.placeShip(shipCordsStartArr, shipCordsEndArr);\n      checkPlacement(shipCordsStartArr, shipCordsEndArr);\n      shipVisual(middleCords(shipCordsStartArr, shipCordsEndArr), 'playerboard');\n      submarine = false;\n      submarineButton.disabled = true;\n      shipCordsStart = '';\n      shipCordsEnd = '';\n      shipCordsStartArr = [];\n      shipCordsEndArr = [];\n      startCordsBox.value = '';\n      endCordsBox.value = '';\n      return;\n    } else if (destroyer === true) {\n      if (getShipLength(shipCordsStartArr, shipCordsEndArr) !== 2) {\n        errorDisplay.classList.add('errorpresent');\n        errorOne.textContent = \"A destroyer ship must be 2 cells long!\";\n        setTimeout(removeErorrClass, 5000);\n        return;\n      }\n      if (checkPlacement(shipCordsStartArr, shipCordsEndArr, \"playerboard\") === true) {\n        return;\n      }\n      player.board.placeShip(shipCordsStartArr, shipCordsEndArr);\n      checkPlacement(shipCordsStartArr, shipCordsEndArr);\n      shipVisual(middleCords(shipCordsStartArr, shipCordsEndArr), 'playerboard');\n      destroyer = false;\n      destroyerButton.disabled = true;\n      shipCordsStart = '';\n      shipCordsEnd = '';\n      shipCordsStartArr = [];\n      shipCordsEndArr = [];\n      startCordsBox.value = '';\n      endCordsBox.value = '';\n      return;\n    }\n  });\n  function checkBufferCords(cords) {\n    if (cords[0] <= 9 && cords[0] >= 0 && cords[1] <= 9 && cords[1] >= 0) {\n      return cords;\n    }\n  }\n  function getBufferZone(cords) {\n    let bufferZone = [];\n    let bufferZoneFiltered, bufferZoneSet, bufferZoneSetToArray;\n    cords.forEach(cord => {\n      for (let i = -1; i <= 1; i++) {\n        for (let j = -1; j <= 1; j++) {\n          bufferZone.push([cord[0] + i, cord[1] + j]);\n        }\n      }\n    });\n    bufferZoneFiltered = bufferZone.map(coord => coord.toString());\n    bufferZoneSet = new Set(bufferZoneFiltered);\n    bufferZoneSetToArray = Array.from(bufferZoneSet).map(coord => coord.split(',').map(Number));\n    return bufferZoneSetToArray;\n  }\n  function resetBoard(boardID) {\n    let cells = document.querySelectorAll(`#${boardID} .cell`);\n    cells.forEach(cell => {\n      cell.classList.remove('ship');\n      cell.hasShip = false;\n    });\n  }\n  function placeComputerShips(boardID) {\n    resetBoard(boardID);\n    const ships = [{\n      name: \"carrier\",\n      length: 5\n    }, {\n      name: \"battleship\",\n      length: 4\n    }, {\n      name: \"cruiser\",\n      length: 3\n    }, {\n      name: \"submarine\",\n      length: 3\n    }, {\n      name: \"destroyer\",\n      length: 2\n    }];\n    let startX, startY, endX, endY, startCords, endCords, vertical, horizontal, ship, shipLength, shipName;\n    let occupiedCords = [];\n    let placedShips = [];\n    let isInvalidPlacement;\n    for (let i = 0; i < ships.length; i++) {\n      let horiVer = Math.random();\n      let horiVerRounded = horiVer.toFixed(1);\n      if (horiVerRounded < 0.5) {\n        horizontal = false;\n        vertical = true;\n      } else {\n        horizontal = true;\n        vertical = false;\n      }\n      ship = ships[i];\n      shipLength = ship.length;\n      shipName = ship.name;\n      if (vertical === true) {\n        do {\n          startX = Math.floor(Math.random() * (9 - 0) + 0);\n          startY = Math.floor(Math.random() * (9 - 0) + 0);\n          endX = startX;\n          endY = startY + shipLength - 1;\n          while (endY > 9) {\n            startY = Math.floor(Math.random() * (9 - 0) + 0);\n            endY = startY + shipLength - 1;\n          }\n          startCords = [startX, startY];\n          endCords = [endX, endY];\n          isInvalidPlacement = checkPlacement(startCords, endCords, boardID);\n        } while (isInvalidPlacement);\n        let fullShipCords = middleCords(startCords, endCords);\n        shipVisual(fullShipCords, boardID);\n        occupiedCords.push(...fullShipCords);\n        occupiedCords.push(...getBufferZone(fullShipCords));\n        placedShips.push([shipName, startCords, endCords, 'vert']);\n        if (boardID === 'playerboard') {\n          player.board.placeShip(startCords, endCords, ship.name);\n        } else if (boardID === 'computerboard') {\n          computer.board.placeShip(startCords, endCords, ship.name);\n        }\n      } else if (horizontal === true) {\n        do {\n          startX = Math.floor(Math.random() * (9 - 0) + 0);\n          startY = Math.floor(Math.random() * (9 - 0) + 0);\n          endX = startX + shipLength - 1;\n          endY = startY;\n          while (endX > 9) {\n            startX = Math.floor(Math.random() * (9 - 0) + 0);\n            endX = startX + shipLength - 1;\n          }\n          startCords = [startX, startY];\n          endCords = [endX, endY];\n          isInvalidPlacement = checkPlacement(startCords, endCords, boardID);\n        } while (isInvalidPlacement);\n        let fullShipCords = middleCords(startCords, endCords);\n        shipVisual(fullShipCords, boardID);\n        occupiedCords.push(...fullShipCords);\n        occupiedCords.push(...getBufferZone(fullShipCords));\n        placedShips.push([shipName, startCords, endCords, 'hori']);\n        if (boardID === 'playerboard') {\n          player.board.placeShip(startCords, endCords, shipName);\n        } else if (boardID === 'computerboard') {\n          computer.board.placeShip(startCords, endCords, shipName);\n        }\n      }\n    }\n  }\n  randomPlaceButton.addEventListener('click', () => {\n    player.board.ships = [];\n    placeComputerShips('playerboard');\n    console.log(player.board.ships.length);\n  });\n  function startGame() {\n    isStarted = true;\n    errorOne.textContent = '';\n    if (player.board.ships.length === 5) {\n      placeComputerShips('computerboard');\n      console.log(computer.board.ships);\n      errorOne.textContent = '';\n      cordsSubmit.disabled = true;\n      startButton.disabled = true;\n      randomPlaceButton.disabled = true;\n      carrierButton.disabled = true;\n      battleshipButton.disabled = true;\n      cruiserButton.disabled = true;\n      submarineButton.disabled = true;\n      destroyerButton.disabled = true;\n      startButton.textContent = \"Game started!\";\n    } else if (player.board.ships.length < 5) {\n      errorDisplay.classList.add('errorpresent');\n      errorOne.textContent = \"ERROR: You must place 5 ships! Currently you only have \" + player.board.ships.length + \" ships\";\n      console.log(player.board.ships);\n      setTimeout(removeErorrClass, 5000);\n    }\n  }\n  startButton.addEventListener('click', function () {\n    startGame();\n  });\n  function updatePlayerList(hitShip) {\n    if (hitShip.type === 'carrier') {\n      carrierHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        carrierHits.classList.add('onehit');\n      } else if (hitShip.hits === 2) {\n        carrierHits.classList.add('twohit');\n      } else if (hitShip.hits === 3) {\n        carrierHits.classList.add('threehit');\n      } else if (hitShip.hits === 4) {\n        carrierHits.classList.add('fourhit');\n      } else if (hitShip.hits === 5) {\n        carrierHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        carrierSunk.textContent = 'Yes';\n        carrierSunk.classList.add('listshipsunk');\n      }\n    } else if (hitShip.type === 'battleship') {\n      battleshipHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        battleshipHits.classList.add('onehit');\n      } else if (hitShip.hits === 2) {\n        battleshipHits.classList.add('twohit');\n      } else if (hitShip.hits === 3) {\n        battleshipHits.classList.add('fourhit');\n      } else if (hitShip.hits === 4) {\n        battleshipHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        battleshipSunk.textContent = 'Yes';\n        battleshipSunk.classList.add('listshipsunk');\n      }\n    } else if (hitShip.type === 'cruiser') {\n      cruiserHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        cruiserHits.classList.add('onehit');\n      } else if (hitShip.hits === 2) {\n        cruiserHits.classList.add('threehit');\n      } else if (hitShip.hits === 3) {\n        cruiserHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        cruiserSunk.textContent = 'Yes';\n        cruiserSunk.classList.add('listshipsunk');\n      }\n    } else if (hitShip.type === 'submarine') {\n      submarineHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        submarineHits.classList.add('onehit');\n      } else if (hitShip.hits === 2) {\n        submarineHits.classList.add('threehit');\n      } else if (hitShip.hits === 3) {\n        submarineHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        submarineSunk.textContent = 'Yes';\n        submarineSunk.classList.add('listshipsunk');\n      }\n    } else if (hitShip.type === 'destroyer') {\n      destroyerHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        destroyerHits.classList.add('threehit');\n      } else if (hitShip.hits === 2) {\n        destroyerHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        destroyerSunk.textContent = 'Yes';\n        destroyerSunk.classList.add('listshipsunk');\n      }\n    }\n  }\n  function updateComputerList(hitShip) {\n    if (hitShip.type === 'carrier') {\n      computerCarrierHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        computerCarrierHits.classList.add('onehit');\n      } else if (hitShip.hits === 2) {\n        computerCarrierHits.classList.add('twohit');\n      } else if (hitShip.hits === 3) {\n        computerCarrierHits.classList.add('threehit');\n      } else if (hitShip.hits === 4) {\n        computerCarrierHits.classList.add('fourhit');\n      } else if (hitShip.hits === 5) {\n        computerCarrierHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        computerCarrierSunk.textContent = 'Yes';\n        computerCarrierSunk.classList.add('listshipsunk');\n      }\n    } else if (hitShip.type === 'battleship') {\n      computerBattleshipHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        computerBattleshipHits.classList.add('onehit');\n      } else if (hitShip.hits === 2) {\n        computerBattleshipHits.classList.add('twohit');\n      } else if (hitShip.hits === 3) {\n        computerBattleshipHits.classList.add('fourhit');\n      } else if (hitShip.hits === 4) {\n        computerBattleshipHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        computerBattleshipSunk.textContent = 'Yes';\n        computerBattleshipSunk.classList.add('listshipsunk');\n      }\n    } else if (hitShip.type === 'cruiser') {\n      computerCruiserHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        computerCruiserHits.classList.add('onehit');\n      } else if (hitShip.hits === 2) {\n        computerCruiserHits.classList.add('threehit');\n      } else if (hitShip.hits === 3) {\n        computerCruiserHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        computerCruiserSunk.textContent = 'Yes';\n        computerCruiserSunk.classList.add('listshipsunk');\n      }\n    } else if (hitShip.type === 'submarine') {\n      computerSubmarineHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        computerSubmarineHits.classList.add('onehit');\n      } else if (hitShip.hits === 2) {\n        computerSubmarineHits.classList.add('threehit');\n      } else if (hitShip.hits === 3) {\n        computerSubmarineHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        computerSubmarineSunk.textContent = 'Yes';\n        computerSubmarineSunk.classList.add('listshipsunk');\n      }\n    } else if (hitShip.type === 'destroyer') {\n      computerDestroyerHits.textContent = hitShip.hits;\n      if (hitShip.hits === 1) {\n        computerDestroyerHits.classList.add('threehit');\n      } else if (hitShip.hits === 2) {\n        computerDestroyerHits.classList.add('fivehit');\n      }\n      if (hitShip.sunk === true) {\n        computerDestroyerSunk.textContent = 'Yes';\n        computerDestroyerSunk.classList.add('listshipsunk');\n      }\n    }\n  }\n});\n\n//# sourceURL=webpack://battleship/./visualgamescript.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./visualgamescript.js");
/******/ 	
/******/ })()
;